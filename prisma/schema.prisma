generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model achievement {
  id                 Int                  @id @default(autoincrement())
  title              String               @db.VarChar(255)
  description        String               @db.VarChar(255)
  image_src          String               @db.VarChar(255)
  stat_key           String               @db.VarChar(50)
  stat_condition     String               @db.VarChar(10)
  stat_value         Int
  earned_achievement earned_achievement[]
}

model challenge {
  id                 Int                  @id @default(autoincrement())
  type               String               @db.VarChar(20)
  question           String
  image_src          String?              @db.VarChar(255)
  order_num          Int
  lesson_id          Int
  lesson             lesson               @relation(fields: [lesson_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  challenge_option   challenge_option[]
  challenge_progress challenge_progress[]

  @@index([lesson_id], map: "idx_challenge_lesson")
}

model challenge_option {
  id           Int       @id @default(autoincrement())
  text         String
  is_correct   Boolean
  image_src    String?   @db.VarChar(255)
  audio_src    String?   @db.VarChar(255)
  challenge_id Int
  challenge    challenge @relation(fields: [challenge_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([challenge_id], map: "idx_challenge_option_challenge")
}

model challenge_progress {
  id           Int          @id @default(autoincrement())
  completed    Boolean
  challenge_id Int
  user_id      Int
  challenge    challenge    @relation(fields: [challenge_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user_account user_account @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([challenge_id], map: "idx_challenge_progress_challenge")
  @@index([user_id], map: "idx_challenge_progress_user")
}

model course {
  id            Int             @id @default(autoincrement())
  title         String          @db.VarChar(255)
  image_src     String          @db.VarChar(255)
  unit          unit[]
  user_progress user_progress[]
}

model earned_achievement {
  id             Int          @id @default(autoincrement())
  obtained_at    DateTime     @default(now()) @db.Timestamp(6)
  achievement_id Int
  user_id        Int
  achievement    achievement  @relation(fields: [achievement_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user_account   user_account @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([achievement_id], map: "idx_earned_achievement_achievement")
  @@index([user_id], map: "idx_earned_achievement_user")
}

model lesson {
  id              Int               @id @default(autoincrement())
  title           String            @db.VarChar(255)
  order_num       Int
  unit_id         Int
  challenge       challenge[]
  unit            unit              @relation(fields: [unit_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  lesson_progress lesson_progress[]

  @@index([unit_id], map: "idx_lesson_unit")
}

model lesson_progress {
  id           Int          @id @default(autoincrement())
  user_id      Int
  lesson_id    Int
  completed    Boolean      @default(false)
  lesson       lesson       @relation(fields: [lesson_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user_account user_account @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([lesson_id], map: "idx_lesson_progress_lesson")
  @@index([user_id], map: "idx_lesson_progress_user")
}

model mission {
  id                 Int             @id @default(autoincrement())
  title              String          @db.VarChar(255)
  description        String
  granted_experience Int             @default(0)
  stat_key           String          @db.VarChar(50)
  stat_condition     String          @db.VarChar(10)
  stat_value         Int
  daily_mission      daily_mission[]
}

model unit {
  id          Int      @id @default(autoincrement())
  title       String   @db.VarChar(255)
  description String
  order_num   Int
  course_id   Int
  lesson      lesson[]
  course      course   @relation(fields: [course_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([course_id], map: "idx_unit_course")
}

model user_account {
  id                 Int                  @id @default(autoincrement())
  name               String               @db.VarChar(255)
  email              String               @unique @db.VarChar(254)
  password           String               @db.VarChar(255)
  created_at         DateTime             @default(now()) @db.Timestamp(6)
  profile_image      String               @default("/default_user.png") @db.VarChar(255)
  hearts             Int                  @default(5)
  points             Int                  @default(0)
  experience         Int                  @default(0)
  level              Int                  @default(1)
  user_type          String               @default("student") @db.VarChar(10)
  challenge_progress challenge_progress[]
  daily_user_stats   daily_user_stats[]
  earned_achievement earned_achievement[]
  lesson_progress    lesson_progress[]
  user_general_stats user_general_stats?
  user_mission       user_mission[]
  user_progress      user_progress[]
}

model user_mission {
  id               Int           @id @default(autoincrement())
  user_id          Int
  daily_mission_id Int
  completed        Boolean       @default(false)
  completed_at     DateTime?     @db.Timestamp(6)
  daily_mission    daily_mission @relation(fields: [daily_mission_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user_account     user_account  @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([user_id], map: "idx_user_mission_user")
  @@index([daily_mission_id], map: "idx_user_mission_daily")
}

model user_progress {
  id               Int          @id @default(autoincrement())
  active_course_id Int
  user_id          Int
  course           course       @relation(fields: [active_course_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user_account     user_account @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([active_course_id], map: "idx_user_progress_course")
  @@index([user_id], map: "idx_user_progress_user")
}

model daily_mission {
  id           Int            @id @default(autoincrement())
  mission_id   Int
  date         DateTime       @db.Date
  mission      mission        @relation(fields: [mission_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user_mission user_mission[]

  @@unique([mission_id, date])
}

model daily_user_stats {
  id                   Int          @id @default(autoincrement())
  user_id              Int
  date                 DateTime     @db.Date
  lessons_completed    Int          @default(0)
  lessons_perfect      Int          @default(0)
  challenges_completed Int          @default(0)
  correct_answers      Int          @default(0)
  wrong_answers        Int          @default(0)
  experience_gained    Int          @default(0)
  points_gained        Int          @default(0)
  time_spent_minutes   Int          @default(0)
  quizzes_completed    Int          @default(0)
  user_account         user_account @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([user_id, date])
  @@index([user_id], map: "idx_daily_user_stats_user")
}

model user_general_stats {
  id                    Int          @id @default(autoincrement())
  user_id               Int          @unique
  total_lessons         Int          @default(0)
  total_lessons_perfect Int          @default(0)
  total_challenges      Int          @default(0)
  total_correct_answers Int          @default(0)
  total_wrong_answers   Int          @default(0)
  total_units_completed Int          @default(0)
  total_missions        Int          @default(0)
  total_points          Int          @default(0)
  total_experience      Int          @default(0)
  quizzes_completed     Int          @default(0)
  user_account          user_account @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([user_id], map: "idx_user_general_stats_user")
}
